PTdata <- PTdata[order(as.Date(PTdata$date), decreasing = TRUE),]
PTdata <- PTdata[1,]
#
#Bstage = c("I","I","II","III","IV","V","VI","VI") #due to 0 to 7, but the highest only to VI, lowest to I only
#B_pRUE <- Bstage[BrunnstromScale(PTdata$Bstage_pRUE)+1]
#B_pLUE <- Bstage[BrunnstromScale(PTdata$Bstage_pLUE)+1]
#B_dRUE <- Bstage[BrunnstromScale(PTdata$Bstage_dRUE)+1]
#B_dLUE <- Bstage[BrunnstromScale(PTdata$Bstage_dLUE)+1]
#B_RLE <- Bstage[BrunnstromScale(PTdata$Bstage_RLE)+1]
#B_LLE <- Bstage[BrunnstromScale(PTdata$Bstage_LLE)+1]
#
#CurrentBstageMPstatus <- paste("Muscle Power (Right/Left):\n",
#                           paste("pUE = ",PTdata$ms_pRUE,"/",PTdata$ms_pLUE,sep=""),
#                           paste("dUE = ",PTdata$ms_dRUE,"/",PTdata$ms_dLUE,sep=""),
#                           paste("pLE = ",PTdata$ms_pRLE,"/",PTdata$ms_pLLE,sep=""),
#                           paste("dLE = ",PTdata$ms_dRLE,"/",PTdata$ms_dLLE,sep=""), sep = "  ")
CurrentBstageMPstatus <- paste("Muscle Power (Proximal/Distal):\n",
paste("RUE ",PTdata$ms_pRUE,"/",PTdata$ms_dRUE,sep=""),
paste("RLE ",PTdata$ms_pRLE,"/",PTdata$ms_dRLE,sep=""),
paste("LUE ",PTdata$ms_pLUE,"/",PTdata$ms_dLUE,sep=""),
paste("LLE ",PTdata$ms_pLLE,"/",PTdata$ms_dLLE,sep=""), sep = "  ")
CurrentBstageMPstatus <- paste(CurrentBstageMPstatus, "\n",
"Brunnstrom's stage:\n",
" RUE P/D = ",PTdata$Bstage_pRUE,"/",PTdata$Bstage_dRUE,
" LUE P/D = ",PTdata$Bstage_pLUE,"/",PTdata$Bstage_dLUE,
" RLE = ",PTdata$Bstage_RLE,
" LLE = ",PTdata$Bstage_LLE,
sep="")
## Dr.Liang's format of Bstage & MP
#method: not showing the ones with normal Bstage(N:7)
#format: RUE(P/D): Brunnstrom's stage II-III/V, muscle power: 0-1/3-4
#check whether it is NA or not (if both prox/distal are normal or NA then ignore it, don't put into note)
showRUE = ((BrunnstromScale(PTdata$Bstage_pRUE) != 7) | (BrunnstromScale(PTdata$Bstage_dRUE) != 7)) & (BrunnstromScale(PTdata$Bstage_pRUE) != 0) & (BrunnstromScale(PTdata$Bstage_dRUE) != 0)
showLUE = ((BrunnstromScale(PTdata$Bstage_pLUE) != 7) | (BrunnstromScale(PTdata$Bstage_dLUE) != 7)) & (BrunnstromScale(PTdata$Bstage_pLUE) != 0) & (BrunnstromScale(PTdata$Bstage_dLUE) != 0)
showRLE = (BrunnstromScale(PTdata$Bstage_RLE) != 7) & (BrunnstromScale(PTdata$Bstage_RLE) != 0)
showLLE = (BrunnstromScale(PTdata$Bstage_LLE) != 7) & (BrunnstromScale(PTdata$Bstage_LLE) != 0)
showAny = sum(c(showRUE,showRLE,showLUE,showLLE))
##
LiangFormat <- paste("Motor:\n",
if(showRUE){paste("RUE(P/D): Brunnstrom's stage ",
PTdata$Bstage_pRUE,"/",PTdata$Bstage_dRUE,", ",
"Muscle Power: ",PTdata$ms_pRUE,"/",PTdata$ms_dRUE,"\n",
sep="")}else{""},
if(showRLE){paste("RLE: Brunnstrom's stage ",
PTdata$Bstage_RLE,", ",
"Muscle Power(P/D): ",PTdata$ms_pRLE,"/",PTdata$ms_dRLE,"\n",
sep="")}else{""},
if(showLUE){paste("LUE(P/D): Brunnstrom's stage ",
PTdata$Bstage_pLUE,"/",PTdata$Bstage_dLUE,", ",
"Muscle Power: ",PTdata$ms_pLUE,"/",PTdata$ms_dLUE,"\n",
sep="")}else{""},
if(showLLE){paste("LLE: Brunnstrom's stage ",
PTdata$Bstage_LLE,", ",
"Muscle Power(P/D): ",PTdata$ms_pLLE,"/",PTdata$ms_dLLE,"\n",
sep="")}else{""},
##if showing none, then show Muscle power solely...
if(showAny==0){
paste("Muscle Power (Proximal/Distal):\n",
paste("RUE ",PTdata$ms_pRUE,"/",PTdata$ms_dRUE,sep=""),
paste("RLE ",PTdata$ms_pRLE,"/",PTdata$ms_dRLE,sep=""),
paste("LUE ",PTdata$ms_pLUE,"/",PTdata$ms_dLUE,sep=""),
paste("LLE ",PTdata$ms_pLLE,"/",PTdata$ms_dLLE,sep=""), sep = "  ")
}else{""},
sep="")##
##Current function status
locomotionTXT <- "NA"
if (!grepl("na",tolower(PTdata$Func_AmbuDevice)) & !is.na(PTdata$Func_AmbuDevice)){
locomotionTXT <- paste("Ambulate with ",PTdata$Func_AmbuDevice,
" under ",ScaleToText(SevenPointScale(PTdata$Func_AmbuAssist), "seven"),
sep="")
}#end if
if (!grepl("na",tolower(PTdata$Func_Stairs)) & !is.na(PTdata$Func_Stairs)){
locomotionTXT <- paste(locomotionTXT,
"; Can climb stairs under ",
ScaleToText(SevenPointScale(PTdata$Func_Stairs), "seven"),
sep="")
}#end if
#
CurrentFuncStatus <- c("Functional status:",
paste("- Rolling to right/left: ",ScaleToText(SevenPointScale(PTdata$Func_Rolling), "seven"), sep=""),
paste("- Sitting up: ",ScaleToText(SevenPointScale(PTdata$Func_Sup2Sit), "seven"), sep=""),
paste("- Sitting balance static/dynamic: ",ScaleToText(FivePointScale(PTdata$bSitStat), "five"),
"/",ScaleToText(FivePointScale(PTdata$bSitDyn), "five"),sep=""),
paste("- Standing up: ",ScaleToText(SevenPointScale(PTdata$Func_Sit2Stand), "seven"), sep=""),
paste("- Standing balance static/dynamic: ",ScaleToText(FivePointScale(PTdata$bStandStat), "five"),
"/",ScaleToText(FivePointScale(PTdata$bStandDyn), "five"),sep=""),
paste("- Transfer: ",ScaleToText(SevenPointScale(PTdata$Func_Chair2Bed), "seven"), sep=""),
paste("- Locomotion: ",locomotionTXT, sep="")
)#
}#end if PTdata!=NA
##Bowel/Bladder/Feeding/Swallow status - added on 2015/10/13
if (!identical(NA,patientDB$content[[i]]$NursingEval)){
NurseEval = patientDB$content[[i]]$NursingEval
BBFS = paste(if(NurseEval[1,]$swallow_tube){"Currently NG feeding"}else{"Currently Oral feeding"},
if(NurseEval[1,]$amount_less50){"Decreased appetite"}else{"Fair appetite"},
if(NurseEval[1,]$bowel_constipation){"Constipation"}else{"No constipation"},
if(NurseEval[1,]$bowel_diarrhea){"Diarrhea"}else{"No diarrhea"},
if(NurseEval[1,]$bladder_method_selfvoid){"Self voiding"},
if(NurseEval[1,]$bladder_method_CIC){"Clean intermittent catheterization"},
if(NurseEval[1,]$bladder_method_foley){"Foley in situ"},
sep="\n")
}#end if
#return results
list(NonActiveOrders = NonActiveOrders,
ActiveOrders = ActiveOrders,
###
RecentRemovedOrders = RecentRemovedOrders,
RecentAddedOrders = RecentAddedOrders,
###
BT = BT,
HR = HR,
RR = RR,
SBP = SBP,
DBP = DBP,
#
SpO2 = SpO2,
FiO2 = FiO2,
Flow = Flow,
###
INPUT = INPUT,
OUTPUT = OUTPUT,
UO = UO,
BW = BW,
PVR = PVR,
###
newBarthel = newBarthel,
funcStatusChange = funcStatusChange,
funcStatusChangeTXT = funcStatusChangeTXT,
##
CurrentFuncStatus =  CurrentFuncStatus,
CurrentBstageMPstatus = CurrentBstageMPstatus,
LiangFormat = LiangFormat,
BBFS = BBFS,
###
RecentLabs = RecentLabs
)#
library(XML)
library(RCurl)
get_url = getURL("http://www.massdevice.com/category/clinical-trials/",encoding = "UTF-8")
html = getURL("http://www.massdevice.com/category/clinical-trials/",encoding = "UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
library(doMC)
?registerDoMC
library(XML)
library(RCurl)
library(doMC)
urls <- c("http://www.massdevice.com/category/clinical-trials/",
"http://www.massdevice.com/category/legal_news/",
"http://www.massdevice.com/category/regulatory_compliance/",
"http://www.massdevice.com/category/mergers_acquisitions/",
"http://www.massdevice.com/category/wound-care/",
"http://www.massdevice.com/category/respiratory/",
"http://www.massdevice.com/category/pharma-etc/",
"http://www.massdevice.com/category/ent/",
"http://www.massdevice.com/category/imaging-etc/",
"http://www.massdevice.com/category/distribution-etc/",
"http://www.massdevice.com/category/dialysis-etc/",
"http://www.massdevice.com/category/diabetes-etc/",
"http://www.massdevice.com/category/cosmetic_aesthetic/",
"http://www.massdevice.com/category/cardiovascular/",
"http://www.massdevice.com/category/orthopedics/",
"http://www.massdevice.com/category/funding_roundup/")
registerDoMC(20)
x <- foreach(i = 1:length(urls), ...) %dopar% {
xxx <- getURL(urls[i], encoding = "UTF-8")
}
length(urls)
registerDoMC(20)
x <- foreach(i = 1:length(urls)) %dopar% {
xxx <- getURL(urls[i], encoding = "UTF-8")
}
x
summary(x)
length(urls)
html <- getURL("http://www.fiercemedicaldevices.com/topics/emerging-markets", "UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
html <- getURL("http://www.fiercemedicaldevices.com/topics/emerging-markets", encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
message("loading target sites data...")
?suppressMessages()
message("\ntest")
?options
options(warn=-1)
##
library(doSNOW)
library(utils)
suppressMessages({
library(doSNOW)
library(utils)
library(XML)
library(RCurl)
library(RSQLite)
})
suppressMessages({
library(doSNOW)
library(utils)
library(XML)
library(RCurl)
library(RSQLite)
Sys.setlocale("LC_TIME", "C")
})
options(warn=-1)
##
message("Starting crawler main program by loading packages...")
message("Medinno crawler core - by Pei-shen Wu, MD (2015)")
suppressMessages({
library(doSNOW)
library(utils)
library(XML)
library(RCurl)
library(RSQLite)
Sys.setlocale("LC_TIME", "C")
})
options(stringsAsFactors = FALSE)
##prepare for string date conversion
getwd()
data <- readRDS("patient_status_DB.rds")
names(data)
table(data)
View(data$table)
names(data$content[[1]])
View(data$content[[1]]$PTstatus)
View(data$content[[1]]$OTstatus)
library(R.matlab)
?R.matlab
data <- readMat("/Volumes/PCBOY SD/hyoid_annotation_v3/test.mat")
str(data)
names(data)
names(data[[1]])
length(data[[1]])
length(data[[1]][[1]])
length(data[[1]][[2]])
str(data[[1]][[1]])
str(data[[1]][[2]])
names(data[[1]][[2]])
names(data[[1]][[1]])
str(data[[1]][[1]])
class(data[[1]][[1]])
(data[[1]][[1]][1])
unlist(data[[1]][[1]])
(data[[1]][[1]][[1]])
(data[[1]][[1]][[2]])
(data[[1]][[1]][[3]])
(data[[2]][[1]][[1]])
(data[[1]][[2]][[1]])
(data[[1]][[2]])
(data[[1]][[1]])
str(data[[1]][[1]])
str(data[[1]])
class(data[[1]])
(data[[1]][1])
names(data)
names(data$data)
header(data$data)
head(data$data)
str(data$data)
attributes(data$data)
str(data$data$annotation)
str(data$data)
str(data$data[[1]])
View(data$data[[1]])
library("R.matlab")
data <- readMat("/Volumes/PCBOY SD/hyoid_annotation_v3/test.mat")
output <- matrix(unlist(data$data[[1]]), ncol = 2, byrow = TRUE)
View(output)
View(output)
library("R.matlab")
data <- readMat("/Volumes/PCBOY SD/hyoid_annotation_v3/test.mat")
annotation <- matrix(unlist(data$data[[1]]), ncol = 4, byrow = TRUE)
predict <- matrix(unlist(data$data[[1]]), ncol = 4, byrow = TRUE)
View(annotation)
View(predict)
predict <- matrix(unlist(data$data[[2]]), ncol = 4, byrow = TRUE)
View(predict)
unlist(data$data[[2]]
)
data$data[[2]]
data$data[[2]][[1]]
length(data$data[[2]][[1]])
length(data$data[[2]][[2]])
str(unlist(data$data[[2]])
)
html <- getURL("http://www.medgadget.com/rehab/page/2",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
library(XML)
library(RCurl)
html <- getURL("http://www.medgadget.com/rehab/page/2",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
xpathSApply(rootNode, '//*[@id="archive-page"]/article[1]/div/h3/a', xmlValue)
xpathSApply(rootNode, '//*[@id="archive-page"]/article/div/h3/a', xmlValue)
xpathSApply(rootNode, "//*[@id='archive-page']/article/div/h3/a", xmlGetAttr, name = "href")
html <- getURL("http://www.medgadget.com/2015/10/robotic-hand-equipped-optical-sensors-senses-touch.html",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
xpathSApply(rootNode, "//*[@id='main']/article/header/h1", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/p/span", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/p/span[@itemprop='dateCreated']", xmlValue)
test <- xpathSApply(rootNode, "//*[@id='main']/article/header/p/span[@itemprop='dateCreated']", xmlValue)
Sys.setlocale("LC_TIME", "C") ##prepare for s
format(as.Date(test, "%B %e, %Y"),"%Y/%m/%d")
?as,Date
?as.Date
?gsub
gsub("st|nd|rd","",test)
test <- gsub("st|nd|rd","",test)
format(as.Date(test, "%B %e, %Y"),"%Y/%m/%d")
xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']/p", xmlValue)
test <- xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']/child()", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']/text()", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']/p", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/header/div[@class='article-post-content']//*", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/div[@class='article-post-content']//*", xmlValue)
xpathSApply(rootNode, "//*[@id='main']/article/div[@class='article-post-content']", xmlValue)
html <- getURL("http://www.medgadget.com/2015/11/coming-live-hangout-demo-magvita-transcranial-magnetic-stimulation-depression.html",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
xpathSApply(rootNode, "//*[@id='main']/article/div[@class='article-post-content']", xmlValue)
###tool for xpath determination
html <- getURL("http://www.medgadget.com/medicine/page/1",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
html
html <- getURL("http://www.medgadget.com/medicine/page/1",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
getURL("http://www.medgadget.com/medicine",
encoding="UTF-8")
html <- getURL("http://www.medgadget.com/medicine",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
###tool for xpath determination
html <- getURL("http://www.medgadget.com/medicine/page/2",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
html <- getURL("http://www.medgadget.com/medicine",
encoding="UTF-8")
doc <- htmlParse(html, encoding = "utf8")
rootNode <- xmlRoot(doc)
xpathSApply(rootNode, "//*[@id='archive-page']/article/div/h3/a", xmlValue)
Sys.info()["sysname"]
Sys.info()
.Platform
.Platform$OS.type
if(.Platform$OS.type == "unix"){system('clear')} #to clear screen in mac OSX console
if(.Platform$OS.type == "windows"){system('cls')} #to clear screen in windows DOS console
?require
installed.packages
installed.packages()
packagedata <- installed.packages
str(packagedata)
packagedata <- installed.packages()
View(packagedata)
View(packagedata)
packagedata <- installed.packages()$Package
packagename <- packagedata$Package
packagedata <- installed.packages()
packagename <- packagedata$Package
View(packagedata)
packagename <- packagedata[,1]
str(packagename)
packagename[1]
packagename[2]
packagename[3]
packagedata <- installed.packages()
packagename <- packagedata[,1]
requiredpackage <- c("xlsx","compiler","doSNOW","utils","ReporteRs")
notinstalled <- requiredpackage[requiredpackage %in% packagename]
version()
?ver
R.Version()
setwd("/Users/peishenwu/Google 雲端硬碟/【01】醫學/PMR/R2/排班/Planner")  ##modify the path here...
##check for installed packages, if missing then download it
packagedata <- installed.packages()
packagename <- packagedata[,1]
requiredpackage <- c("xlsx","compiler","doSNOW","utils","ReporteRs")
notinstalled <- requiredpackage[!(requiredpackage %in% packagename)]
if(length(notinstalled)!=0){
#install missing packages
for(index in 1:length(notinstalled)){
install.packages(notinstalled[index])
}
}#end if
##
source("oncall_planner.R")
source("output_toWord.R")
##starting every
#oncall_planner
source("oncall_planner.R")
data <- readRDS("swapper_output.rds")
for(index in 1:length(data$results)){
msg <- try(OncallPlanner(index),F)[1]
if(length(msg)==0){break}
}#end for
index
index=1
data <- readRDS("swapper_output.rds")
#
pb <- txtProgressBar(min = 1, max = iter_max, style=3)
progress <- function(n){ setTxtProgressBar(pb, n) }
#
result.index <- data$quality$resultIndex[index]
persondata <- data$persondata
contraspace <- data$contraspace
result <- data$results[[result.index]]
holidays <- data$holidays
worksrc <- data.frame(persondata, senior = rep(NA,nrow(persondata)),
result)
worksrc$senior <- sapply(worksrc$level,function(x){c(1:4)[c("R1","R2","R3","R4") %in% gsub(" ","",x)]})
##
oncall.needed <- data$contraspace_days[sapply(data$contraspace_days,
function(x){sum(worksrc[worksrc[,-c(1:3)][,x] == 1,]$senior>2) == 0})]
oncall.persons <- c(1:nrow(persondata))[worksrc$senior > 2]
##check for error --> no available persons on some certain day??
if(sum(apply(contraspace[oncall.persons,oncall.needed], 2, sum) == length(oncall.persons)) != 0){
stop(paste("No available senior duties for oncall on day:",
paste(data$contraspace_days[apply(contraspace[oncall.persons,oncall.needed], 2, sum) == length(oncall.persons)],
collapse=","),
sep=" "))
}#end if
##sort days according to contra limitations
sort.order <- data.frame(days = oncall.needed,
contras = apply(contraspace[oncall.persons,oncall.needed],2,sum))
sort.order <- sort.order[order(sort.order$contras, decreasing = T),]
oncall.needed <- sort.order$days
oncall.holidays <- oncall.needed[oncall.needed %in% holidays]
oncall.workdays <- oncall.needed[!(oncall.needed %in% holidays)]
##run many times
oncall.results <- c()
oncall.quality <- c()
count_iter = 0
data <- readRDS("swapper_output.rds")
#
pb <- txtProgressBar(min = 1, max = iter_max, style=3)
progress <- function(n){ setTxtProgressBar(pb, n) }
#
result.index <- data$quality$resultIndex[index]
persondata <- data$persondata
contraspace <- data$contraspace
result <- data$results[[result.index]]
holidays <- data$holidays
worksrc <- data.frame(persondata, senior = rep(NA,nrow(persondata)),
result)
worksrc$senior <- sapply(worksrc$level,function(x){c(1:4)[c("R1","R2","R3","R4") %in% gsub(" ","",x)]})
##
oncall.needed <- data$contraspace_days[sapply(data$contraspace_days,
function(x){sum(worksrc[worksrc[,-c(1:3)][,x] == 1,]$senior>2) == 0})]
oncall.persons <- c(1:nrow(persondata))[worksrc$senior > 2]
if(sum(apply(contraspace[oncall.persons,oncall.needed], 2, sum) == length(oncall.persons)) != 0){
stop(paste("No available senior duties for oncall on day:",
paste(data$contraspace_days[apply(contraspace[oncall.persons,oncall.needed], 2, sum) == length(oncall.persons)],
collapse=","),
sep=" "))
}#end if
contraspace[oncall.persons,oncall.needed]
oncall.needed
oncall.persons
contraspace[oncall.persons,oncall.needed]
contraspace
data <- readRDS("planner_output.rds")
results <- data$results
contraspace <- data$contraspace[,-c(1,2)] #remove names, levels columns
holidays <- data$holidays
contraspace_days <- data$contraspace_days
persondata <- data$contraspace[, c(1,2)]
strucdata <- data$strucdata
View(contraspace)
View(strucdata)
data <- readRDS("swapper_output.rds")
#
pb <- txtProgressBar(min = 1, max = iter_max, style=3)
progress <- function(n){ setTxtProgressBar(pb, n) }
#
result.index <- data$quality$resultIndex[index]
persondata <- data$persondata
contraspace <- data$contraspace
result <- data$results[[result.index]]
holidays <- data$holidays
data$strucdata
source("swapper.R")
msg<- try(source("swapper.R"),F)[1]
msg
length(msg)
grepl("Error",msg)
#oncall_planner
source("oncall_planner.R")
data <- readRDS("swapper_output.rds")
for(index in 1:length(data$results)){
msg <- try(OncallPlanner(index),F)[1]
if(length(msg)==0){break}
}#end for
#output_toWord
source("output_toWord.R")
data <- readRDS("oncallplanner_output.rds")
index <- data$useindex
WordOutput(index)
##
message("\nProcess completed")
