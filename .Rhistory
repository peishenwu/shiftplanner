if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
10 %/% 100
View(sort.config.data)
View(workspace)
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
View(sort.config.data)
View(workspace)
workspace <- appointspace ##initialize with appointment space
contraspace.updated <- (contraspace | appointspace)*1
##update contraspace if 2 duties exist per day (do this first, because it can be filled by appointment)
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##Planner algorithm
skip = F
for(irow in 1:nrow(workspace)){
availabledays <- contraspace.updated[irow,]
availabledays <- contraspace_days[availabledays != 1]
##identify which workday/holiday had been appointed prior
holiday.appointed <- contraspace_days[appointspace[irow,]==1][holidays]
holiday.appointed <- holiday.appointed[complete.cases(holiday.appointed)]
workday.appointed <- contraspace_days[appointspace[irow,]==1][-holidays]
workday.appointed <- workday.appointed[complete.cases(workday.appointed)]
##reset
holiday.to.fill <- NULL
workday.to.fill <- NULL
##
if (strucdata$holidays[irow]!=0){
available.holidays <- availabledays[(availabledays %in% holidays)]
if((length(available.holidays) == 0) | (length(available.holidays) < strucdata$holidays[irow])){
skip <- T
break #exit for loop
}else{
holiday.to.fill <- c(holiday.appointed, available.holidays)
if(length(available.holidays)>1){ #only sample when there is more than one choice
holiday.to.fill <- c(holiday.appointed,
sample(available.holidays, strucdata$holidays[irow] - appoint_struc$holidays[irow]))
}#end if
}#end if
}#end if
if (strucdata$workdays[irow]!=0){
available.workdays <- availabledays[!(availabledays %in% holidays)]
if((length(available.workdays) == 0) | (length(available.workdays) < strucdata$workdays[irow])){
skip <- T
break #exit for loop
}else{
workday.to.fill <- c(workday.appointed, available.workdays)
if(length(available.workdays)>1){ #only sample when there is more than one choice
workday.to.fill <- c(workday.appointed,
sample(available.workdays, strucdata$workdays[irow] - appoint_struc$workdays[irow]))
}#end if
}#end if
}#end if
##
if (length(holiday.to.fill)!=0){
workspace[irow, c(holiday.to.fill)] <- 1
}#end if
if (length(workday.to.fill)!=0){
workspace[irow, c(workday.to.fill)] <- 1
}#end if
##update contraspace if 2 duties exist per day
contraspace.updated[,(apply(workspace,2,sum) == 2)] <- 1
##update contraspace according to strucdata status
contraspace.updated[apply(workspace[,c(holidays)],1,sum) == strucdata$holidays, c(holidays)] <- 1 ##if already match holiday struc for every person
contraspace.updated[apply(workspace[,-c(holidays)],1,sum) == strucdata$workdays, -c(holidays)] <- 1 ##if already match workday struc for every person
##
#
}#end for
#
View(workspace)
length(available.holidays)
strucdata$holidays[irow]
availabledays[(availabledays %in% holidays)]
contraspace.updated[irow,]
